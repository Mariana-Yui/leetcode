/*
 * @lc app=leetcode.cn id=37 lang=typescript
 *
 * [37] 解数独
 *
 * https://leetcode.cn/problems/sudoku-solver/description/
 *
 * algorithms
 * Hard (67.62%)
 * Likes:    1781
 * Dislikes: 0
 * Total Accepted:    232.8K
 * Total Submissions: 344.3K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 编写一个程序，通过填充空格来解决数独问题。
 *
 * 数独的解法需 遵循如下规则：
 *
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 *
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 *
 *
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
 *
 * 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
 * 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
 *
 *
 *
 *
 *
 *
 * 提示：
 *
 *
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 题目数据 保证 输入数独仅有一个解
 *
 *
 *
 *
 *
 */

// @lc code=start
/**
 Do not return anything, modify board in-place instead.
 */
function solveSudoku(board: string[][]): void {
  // 回溯经典问题 非常难
  /**
   * 和以往回溯问题不同, 数独问题需要在每行每列的空都填上数字, 那么就需要二维遍历 遍历行+遍历列
   * 每个树层都是相同位置从1-9的尝试, 所以最多会是个九叉树
   * 结合题干 保证输入数组有且仅有一个解, 那么抽象为N叉树后就是个求根节点到叶子节点唯一路径的问题, 所以递归的返回值是boolean
   * 数独的定义: 同行 同列 9宫格 中不能含有相同数字
   */
  function backtracking(board: string[][]): boolean {
    // 题干告诉我们有且仅有一个解, 所以不需要终止条件, 找到直接返回就好
    for (let i = 0; i < board.length; i++) {
      for (let j = 0; j < board[0].length; j++) {
        // 因为i,j 每次递归都是从0开始遍历, 这里跳过已填入数字的区块
        if (board[i][j] !== '.') continue;
        for (let k = 1; k <= 9; k++) {
          if (isValid(board, i, j, `${k}`)) {
            board[i][j] = `${k}`;
            // 这里递归会一直递归到叶子节点, 根据题干, 一定会有终止
            if (backtracking(board)) return true;
            board[i][j] = '.'; // 回溯
          }
        }
        // 1-9都不符合条件, 说明前面填的有问题, 返回false
        return false;
      }
    }
    // 全部遍历完都没返回false说明当前路径是唯一解, 返回true
    return true;
  }
  // 根据数独的定义判断该区块填入的数字是否合规 i->行 j->列
  function isValid(board: string[][], row: number, col: number, val: string): boolean {
    // 同行没有相同数字
    for (let j = 0; j < board[0].length; j++) {
      // if (j === col) continue; // 不需要 因为还没赋值
      if (board[row][j] === val) return false;
    }
    // 同列没有相同数字
    for (let i = 0; i < board.length; i++) {
      // if (i === row) continue;
      if (board[i][col] === val) return false;
    }
    // 9宫格没有相同数字
    const _row = Math.floor(row / 3) * 3;
    const _col = Math.floor(col / 3) * 3;
    for (let i = _row; i < _row + 3; i++) {
      for (let j = _col; j < _col + 3; j++) {
        // if (i === row && j === col) continue;
        if (board[i][j] === val) return false;
      }
    }
    return true;
  }

  backtracking(board);
}
// @lc code=end
